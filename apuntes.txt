OOP: Object oriented programming 
Crear objetos que contenga data y funciones
- Más rápido
- Más fácil 
- DRY (Don't repeat yourself)
- Más fácil de mantener, modificar y debuggear

Class: Tenemos variables (attributes) y funciones (methods) dentro de la clase 
Object: Instance de la class para poder empezar a usarla. Hay que definirlo en el main function usando: (nombre de la clase) (nombre del objeto);

Encapsulation: Meter methods y variables dentro de un class se dice Encapsulation. Esto sirve para esconder los datos privados usando private.
Access specifiers: Por ahroa hemos estudiado public y private. Pero también existe protected.
Protected es parecido a public combinado con private.
Private: nadie tiene acceso 
Protected: El main no tiene acceso pero el derived class si
Public: todo el mundo tiene acceso

Constructors: Es un method con el mismo nombre de la clase y se ejecuta automáticamente
Se hace: nombre_de_la_clase()
Es como conectar el method con el Object

Inheritance: Se pueden usar attributes y methods de una clase a otra
Parent/base class: Es la clase que da los methdos y attributes
Child/derived class: La clase que recibe las cosas. Se usa : para indicar
Ej:
class Base{

};
class Derived: public Base{

};
Es como si la derived class agarrara todo lo que la base class tiene

